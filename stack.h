#ifndef STACK_H // Защита от повторного включения заголовочного файла
#define STACK_H

#include "publication.h" // Включение заголовочного файла со структурой Publication

// Определение узла для связного списка
typedef struct Node
{
    Publication data;  // Данные, хранящиеся в узле (структура Publication)
    struct Node *next; // Указатель на следующий узел в списке
} Node;

// Определение структуры стека, реализованного через связный список
typedef struct
{
    Node *top; // Указатель на вершину стека (последний добавленный элемент)
    int size;  // Текущий размер стека (количество элементов)
} Stack;

// Прототипы функций для работы со стеком

// Инициализация стека
// Устанавливает вершину стека (top) в NULL и размер (size) в 0
void initStack(Stack *stack);

// Добавление элемента в стек
// Принимает указатель на стек и структуру Publication для добавления
void push(Stack *stack, Publication item);

// Удаление элемента из стека
// Возвращает структуру Publication из вершины стека и удаляет её
Publication pop(Stack *stack);

// Получение верхнего элемента стека без удаления
// Возвращает указатель на структуру Publication в вершине стека
Publication *peek(Stack *stack);

// Получение текущего размера стека
// Возвращает количество элементов в стеке
int getSize(Stack *stack);

// Получение элемента по индексу
// Принимает указатель на стек и индекс; возвращает указатель на Publication или NULL, если индекс недопустим
Publication *getElement(Stack *stack, int index);

// Очистка стека
// Удаляет все элементы из стека, освобождая выделенную память
void clearStack(Stack *stack);

#endif // STACK_H       // Завершение защиты от повторного включения
